{"version":3,"sources":["components/Game/constants.js","components/Game/utils.js","components/Game/Board/Circle/index.jsx","components/Game/Board/index.jsx","components/Game/GameInfo/History/index.jsx","components/Game/GameInfo/Status/index.jsx","components/Game/GameInfo/index.jsx","components/Game/calculateWinningCells.js","components/Game/index.jsx","components/App/index.js","index.js"],"names":["EMPTY","createBoard","size","Array","from","length","Point","x","y","this","vector","p1","p2","getCell","board","point","updateBoard","player","map","row","cell","isEqual","getNextPlayer","stepNumber","getPointByStepNumber","history","prevBoard","Circle","isWinner","onClick","className","Board","winningCells","handleClick","has","toString","History","setStepNumber","useState","isReversed","setIsReversed","showLocation","index","location","prevIsReversed","i","style","fontWeight","Status","winner","getStatusRow","text","display","justifyContent","margin","width","GameInfo","calculateWinningCells","Set","flatMap","getWinningLine","winningLine","nextPoint","getNextPoint","nextCell","invertedVector","winningLine1","winningLine2","Game","setHistory","nextPlayer","prevHistory","slice","prevStepNumber","App","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.36299f80.chunk.js","sourcesContent":["export const BOARD_SIZE = 12;\nexport const WINNING_LINE_SIZE = 5;\n\nexport const RED = 'r';\nexport const GREEN = 'g';\nexport const EMPTY = null;\n","import { RED, GREEN, EMPTY } from './constants';\n\nexport const createBoard = size =>\n  Array.from({ length: size }, () => Array.from({ length: size }, () => EMPTY));\n\nexport class Point {\n  static isEqual(p1, p2) {\n    return p1.x === p2.x && p1.y === p2.y;\n  }\n\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  getNextPoint(vector) {\n    const x = this.x + vector[0];\n    const y = this.y + vector[1];\n\n    return new Point(x, y);\n  }\n\n  toString() {\n    return `${this.x}${this.y}`;\n  }\n}\n\nexport const getCell = (board, point) => board[point.y]?.[point.x];\n\nexport const updateBoard = (board, point, player) =>\n  board.map((row, y) =>\n    row.map((cell, x) => (Point.isEqual(point, new Point(x, y)) ? player : cell))\n  );\n\nconst isEven = n => n % 2 === 0;\n\nexport const getNextPlayer = stepNumber => (isEven(stepNumber) ? RED : GREEN);\n\nexport const getPointByStepNumber = (history, stepNumber) => {\n  if (stepNumber === 0) {\n    return null;\n  }\n\n  const prevBoard = history[stepNumber - 1];\n  const board = history[stepNumber];\n\n  for (let y = 0; y < board.length; y++) {\n    for (let x = 0; x < board[y].length; x++) {\n      const point = new Point(x, y);\n\n      if (getCell(prevBoard, point) !== getCell(board, point)) {\n        return point;\n      }\n    }\n  }\n};\n","import './styles.scss';\n\nfunction Circle({ cell, isWinner, onClick }) {\n  return (\n    <div className=\"Circle\" onClick={onClick}>\n      <div className={`circle ${cell} ${isWinner ? 'winner' : ''}`} />\n    </div>\n  );\n}\n\nexport default Circle;\n","import { Point } from '../utils';\nimport Circle from './Circle';\nimport './styles.scss';\n\nfunction Board({ board, onClick, winningCells }) {\n  const handleClick = point => {\n    onClick(point);\n  };\n\n  return (\n    <div className=\"Board\">\n      {board.map((row, y) => (\n        <div className=\"row\" key={y}>\n          {row.map((cell, x) => {\n            const point = new Point(x, y);\n\n            return (\n              <Circle\n                key={x}\n                cell={cell}\n                isWinner={winningCells.has(point.toString())}\n                onClick={() => handleClick(point)}\n              />\n            );\n          })}\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default Board;\n","import { useState } from 'react';\n\nimport { getPointByStepNumber } from '../../utils';\nimport './styles.scss';\n\nfunction History({ history, stepNumber, setStepNumber }) {\n  const [isReversed, setIsReversed] = useState(true);\n\n  const showLocation = (index, stepNumber) => {\n    const point = getPointByStepNumber(history, index);\n    const location = `#${index} (${point.x + 1}, ${point.y + 1})`;\n\n    return index === stepNumber ? `Step ${location}` : `Go to move ${location}`;\n  };\n\n  return (\n    <div className=\"History\">\n      <button onClick={() => setIsReversed(prevIsReversed => !prevIsReversed)}>Reverse</button>\n\n      <ul>\n        {history.map((board, i) => {\n          const index = isReversed ? history.length - 1 - i : i;\n\n          return (\n            <li\n              key={index}\n              style={{ fontWeight: stepNumber === index ? 'bold' : 'unset' }}\n              onClick={() => {\n                setStepNumber(index);\n              }}\n            >\n              {index === 0\n                ? index === stepNumber\n                  ? 'Start of the game'\n                  : 'Go to game start'\n                : showLocation(index, stepNumber)}\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n\nexport default History;\n","import Circle from '../../Board/Circle';\nimport { getNextPlayer } from '../../utils';\n\nfunction Status({ winner, size, stepNumber }) {\n  const getStatusRow = (text, stepNumber) => (\n    <div style={{ display: 'flex', justifyContent: 'flex-start' }}>\n      <span style={{ margin: 'auto 0' }}>{text}:</span>\n      <div style={{ width: 5 }} />\n      <Circle cell={getNextPlayer(stepNumber)} />\n    </div>\n  );\n\n  const getStatus = () => {\n    if (winner) {\n      return getStatusRow('Winner', stepNumber - 1);\n    } else if (stepNumber === size ** 2) {\n      return 'Draw';\n    } else {\n      return getStatusRow('Next player', stepNumber);\n    }\n  };\n\n  return <div className=\"Status\">{getStatus()}</div>;\n}\n\nexport default Status;\n","import History from './History';\nimport Status from './Status';\nimport './styles.scss';\n\nfunction GameInfo({ winner, size, history, stepNumber, setStepNumber }) {\n  return (\n    <div className=\"GameInfo\">\n      <Status winner={winner} size={size} stepNumber={stepNumber} />\n\n      <History history={history} stepNumber={stepNumber} setStepNumber={setStepNumber} />\n    </div>\n  );\n}\n\nexport default GameInfo;\n","import { getPointByStepNumber, getCell } from './utils';\nimport { WINNING_LINE_SIZE } from './constants';\n\nconst calculateWinningCells = (history, stepNumber) => {\n  if (stepNumber === 0) {\n    return new Set();\n  }\n\n  const board = history[stepNumber];\n  const point = getPointByStepNumber(history, stepNumber);\n  const cell = getCell(board, point);\n\n  const vectors = [\n    [0, 1], // DOWN\n    [1, 1], // DOWN RIGHT\n    [1, 0], // RIGHT\n    [1, -1], // UP RIGHT\n  ];\n\n  const winningCells = vectors.flatMap(vector => {\n    const getWinningLine = (point, vector, winningLine = []) => {\n      const nextPoint = point.getNextPoint(vector);\n      const nextCell = getCell(board, nextPoint);\n\n      if (cell === nextCell) {\n        return getWinningLine(nextPoint, vector, [...winningLine, nextPoint]);\n      } else {\n        return winningLine;\n      }\n    };\n\n    const invertedVector = [-vector[0], -vector[1]];\n    const winningLine1 = getWinningLine(point, vector);\n    const winningLine2 = getWinningLine(point, invertedVector);\n    const winningLine = [...winningLine1, point, ...winningLine2];\n\n    return winningLine.length >= WINNING_LINE_SIZE ? winningLine : [];\n  });\n\n  return new Set(winningCells.map(point => point.toString()));\n};\n\nexport default calculateWinningCells;\n","import { useState } from 'react';\n\nimport Board from './Board';\nimport GameInfo from './GameInfo';\nimport { createBoard, getCell, getNextPlayer, updateBoard } from './utils';\nimport calculateWinningCells from './calculateWinningCells';\nimport { EMPTY } from './constants';\nimport './styles.scss';\n\nfunction Game({ size }) {\n  const [history, setHistory] = useState(() => [createBoard(size)]);\n  const [stepNumber, setStepNumber] = useState(0);\n\n  const board = history[stepNumber];\n  const nextPlayer = getNextPlayer(stepNumber);\n\n  const winningCells = calculateWinningCells(history, stepNumber);\n  const winner = winningCells.size ? nextPlayer : EMPTY;\n\n  const handleClick = point => {\n    if (getCell(board, point) === EMPTY && !winner) {\n      setHistory(prevHistory => [\n        ...prevHistory.slice(0, stepNumber + 1),\n        updateBoard(board, point, nextPlayer),\n      ]);\n\n      setStepNumber(prevStepNumber => prevStepNumber + 1);\n    }\n  };\n\n  return (\n    <div className=\"Game\">\n      <Board board={board} winningCells={winningCells} onClick={handleClick} />\n\n      <GameInfo\n        winner={winner}\n        size={size}\n        history={history}\n        stepNumber={stepNumber}\n        setStepNumber={setStepNumber}\n      />\n    </div>\n  );\n}\n\nexport default Game;\n","import Game from '../Game';\nimport { BOARD_SIZE } from '../Game/constants';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game size={BOARD_SIZE} />\n    </div>\n  );\n}\n\nexport default App;\n","import { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/App';\nimport './styles.css';\n\nconst rootElement = document.getElementById('root');\n\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}